KEYWORD 	DESCRIPTION				EXAMPLE
and		logical and				True and False == False
as		Part of the with-as statement.		with X as Y: pass
assert		Assert(ensure) that something is true.	assert False, "Error!"
break 		Stop this loop right now.		while True: break
class 		Define a class.				class Person(object)
continue 	Don't process more of loop		while True: continue
def		Define a function. 			def X(): pass
del 		Delete from dictionary. 		del X[Y]
elif		Else if condition. 			if: X; elif: Y; else: J
else		Else condition.				if: X; ""
except		If an exception happens, do this. 	except ValueError: print
exec		Run a string as Python.			exec 'print("hello")'
finally		Exceptions or not, do this now.		finally: pass
for 		Loop over a collection of things.	for X in Y: pass
from		Import specific parts of a module. 	from x import Y
global		Declare that you want a global variable	global X
if		If condition. 				if: X; elif: Y; else: Jimport 	        Import a module into this one 	        import os
in		Part of for-loops. Also text X in Y.	for X in Y: pass
is		Like==to test equality.			1 is 1==True
lambda		Create a short anonymous function.	s=lambda y: y**y;s(3)
not		Logical not. 			        not True == False
or 		Logical or. 				True or False == True
pass		This block is empty. 			def empty(): pass
raise		Raise exception when things go wrong.	raise ValueError('no'
try		Try block, if exception, go to except.	try: pass
with		With an expression as a variable do. 	with X as Y: pass
yield 		Pause here and return to caller. 	def X(): yield Y; X().ne
									
TYPE		DESCRIPTION				EXAMPLE
True		True Boolean value.			True or False == True
False  		False Boolean value. 			False and True == Fals
None		Represents "nothing", "no value".	x = None
bytes		Stores bytes, of text, png, file, etc.	x = b"hello"
strings		Stores textual information.		x = "hello"
numbers 	Stores integers. 			i = 100
floats		Stores decimals.			i = 10.389
lists		Stores a list of things. 		j = [1,2,3,4]
dicts		Stores a key=value mapping of things. 	e = {'x': 1, 'y': 2}

OPERATOR	DESCRIPTION				EXAMPLE
+		Addition				2 + 4 == 6
-		Subtraction				2 - 4 == -2
* 		Multiplication				2 * 4 == 8
** 		Power of				2 ** 4 == 16
/ 		Division				2 / 4 == 0.5
//		Floor division				2 // 4 == 0
%		String interpolate or modulus		2 % 4 == 2
== 		Equal					4 == 5 == False
{}		Dict curly braces			{'x': 5, 'y': 10}
@		At(decorators)				@classmethod
,		Comma					range(0, 10)
=		Assign equal				x = 10
+= 		Add and assign				x = 1; x += 2
-=		Subtract and assign			x = 1; x -= 2
*=		Multiply and assign			x = 1; x *= 2
/= 		Divide and assign			x = 1; x /= 2
//=		Floor divide and assign			x = 1; x //= 2
%=		Modulus assign				x = 1; x %= 2

